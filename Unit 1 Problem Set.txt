Unit 1 Problem Set
(Some questions aren't posted since I was unable to copy and paste the question template)


1) # Write Python code that prints out the number of hours in 7 weeks.
hours_in_day = 24
days_in_seven_weeks = 7 * 7

number_of_hours = days_in_seven_weeks * hours_in_day
print number_of_hours

Output:
1176


2)# Write Python code that stores the distance 
# in meters that light travels in one 
# nanosecond in the variable, nanodistance. 
# These variables are defined for you:

speed_of_light = 299800000. # meters per second
nano_per_sec = 1000000000. # 1 billion

nanodistance= speed_of_light/nano_per_sec 

print nanodistance

Output:
0.2998

3) # Given the variables s and t defined as:
s = 'udacity'
t = 'bodacious'
# write Python code that prints out udacious
# without using any quote characters in
# your code.

print s[0:1]+t[2:] #concatenating the string in variable t from position 2 till the end, to the first two characters of s

Output:
udacious


4) # Assume text is a variable that
# holds a string. Write Python code
# that prints out the position
# of the first occurrence of 'hoo'
# in the value of text, or -1 if
# it does not occur at all.

text = "first hoo" 
print text.find('hoo') 

#we invoke find on 'text' to find the first occurrence of 'hoo'. Python 

Output:
6

text= "hi"
print text.find('hoo') 

Output:
-1

5)# Assume text is a variable that
# holds a string. Write Python code
# that prints out the position
# of the second occurrence of 'zip'
# in text, or -1 if it does not occur
# at least twice.

# For example,
#text = 'all zip files are zipped' 
# >>> 18
# text = 'all zip files are compressed'
# >>> -1

text = "all zip files are zipped" 

find_zip= text.find('zip', text.find('zip')+1) 
print find_zip

Output:
18 

# we initialize variable first_zip, to the result of finding in the 'text' the occurrence of 'zip', following the first occurrence of zip

text = 'all zip files are compressed'
find_zip= text.find('zip', text.find('zip')+1) 
print find_zip

Output:
-1


6) # Given a variable, x, that stores the 
# value of any decimal number, write Python 
# code that prints out the nearest whole 
# number to x.
# If x is exactly half way between two 
# whole numbers, round up, so
# 3.5 rounds to 4 and 2.5 rounds to 3.
# You may assume x is not negative.

# Hint: The str function can convert any number into a string.
# eg str(89) converts the number 89 to the string '89'

# Along with the str function, this problem can be solved 
# using just the information introduced in unit 1.

print int(float(x + 0.5))

x = 3.14159 
>>> 3 
x = 27.63 
>>> 28 (not 28.0)
x = 3.5 
>>> 4 (not 4.0)

#x = 3.14159



Optional Problem Set

###############################################
#       Exercise by Websten from forums       #
###############################################
# To minimize errors when writing long texts with
# complicated expressions you could replace 
# the tricky parts with a marker. 
# Write a program that takes a line of text and 
# finds the first occurrence of a certain marker 
# and replaces it with a replacement text. 
# The resulting line of text should be stored in a variable. 
# All input data will be given as variables.
#
# Replace the first occurrence of marker in the line below.
# There will be at least one occurence of the marker in the
# line of text. Put the answer in the variable 'replaced'.
# Hint: You can find out the length of a string by command
# len(string). We might test your code with different markers!

# Example 1
marker = "AFK"
replacement = "away from keyboard"
line = "I will now go to sleep and be AFK until lunch time tomorrow."

# Example 2 # uncomment this to test with different input
marker = "EY"
replacement = "Eyjafjallajokull"
line = "The eruption of the volcano EY in 2010 disrupted air travel in Europe for 6 days."

pos = line.find(marker)  
first_part = line[:pos]
last_part = line[pos+len(marker):]
replaced = first_part + replacement + last_part
print replaced
    
   
>>> I will now go to sleep and be away from keyboard until lunch time tomorrow.
>>> "The eruption of the volcano EY in 2010 disrupted air travel in Europe for 6 days."


###############################################
#       Exercise by Websten from forums       #
###############################################
# A palindrome is a word or a phrase that reads 
# the same backwards as forwards. Make a program 
# that checks if a word is a palindrome. 
# If the word is a palindrome, print 0 to the terminal,
# -1 otherwise. 
# The word contains lowercase letters a-z and 
# will be at least one character long.
#
### HINT! ###
# You can read a string backwards with the following syntax:
# string[::-1] - where the "-1" means one step back.
# This exercise can be solved with only unit 1 knowledge
# (no loops or conditions)

word = "madam"
# test case 2
# word = "madman" # uncomment this to test

is_palindrome = word.find(word[::-1])

# TESTING
print is_palindrome

Output
0